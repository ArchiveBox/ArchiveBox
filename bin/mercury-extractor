#!/usr/bin/env node

// https://github.com/pirate/readability-extractor/blob/master/readability-extractor
// https://github.com/postlight/mercury-parser/blob/master/cli.js

// https://stackoverflow.com/a/48729712/1043209
// https://github.com/maxogden/inline-images/blob/master/index.js

const cheerio = require('cheerio')
const path = require('path')
const fs = require('fs')
const url = require('url')
const request = require('sync-request');


async function parse(html, url){
  const Mercury = require('@postlight/mercury-parser');
  var buf = Buffer.from(html, "utf-8");
  var article = await Mercury.parse(url, {html: buf, contentType: "html"});
  var article_txt = await Mercury.parse(url, {html: buf, contentType: "text"});
  var inlined = inliner(article.content, url);
  article.content_txt = article_txt.content;
  article.content_i = inlined;
  return article;
}

function inliner(html, base) {
  var contentTypes = {
    ".png": "image/png",
    ".gif": "image/gif",
    ".jpg": "image/jpeg",
    ".jpeg": "image/jpeg",
    ".bmp": "image/bmp",
    ".webp": "image/webp"
  }
  
  var dom = cheerio.load(String(html))
  inlineImages(dom)
  
  return dom.html({decodeEntities: false});
  
  function inlineImages(dom) {
    dom('img').each(function(idx, el) {
      try {
        el = dom(el)
        var src = el.attr('src')
        if (src.startsWith("data:")) {
          console.error("already an embedded image, skipped")
          return
        }
        src = url.resolve(base, src)
        if (src) {
          console.error("Fetching url", src)
          var res = request('GET', src, {headers: {"Referer": base}});
          var img = res.getBody();
          var contentType = contentTypes[path.extname(src)] || 'image/png'
          var dataUri = "data:" + contentType + ";base64," + img.toString("base64")
          el.attr('src', dataUri)
          el.attr('data-x-src', src)
        }  
      } catch (error) {
        console.error("failed image:", error)
      }
    })
  }
  
  function isLocal(href) {
    return href && !url.parse(href).hostname;
  }
}



(async () => {
  const source_path = process.argv[2];
  const source_url = process.argv[3] || "https://www.example.com/the-page-i-got-the-source-from";
  if(source_path == "--version"){
    console.log("0.1.0")
  }
  else{
    const fs = require("fs");
    const data = fs.readFileSync(source_path).toString();
    var parsed = await parse(data, source_url);
    console.log(JSON.stringify(parsed));
  }
  
})();
