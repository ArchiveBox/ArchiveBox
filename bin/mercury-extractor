#!/usr/bin/env node

// https://github.com/pirate/readability-extractor/blob/master/readability-extractor
// https://github.com/postlight/mercury-parser/blob/master/cli.js

// https://stackoverflow.com/a/48729712/1043209
// https://github.com/maxogden/inline-images/blob/master/index.js
// https://github.com/cheeriojs/cheerio/issues/752

const cheerio = require('cheerio');
const path = require('path');
const url = require('url');
const Mercury = require('@postlight/mercury-parser');


async function parse(html, url){
  var buf = Buffer.from(html, "utf-8");
  var article = await Mercury.parse(url, {html: buf, contentType: "html"});
  var article_txt = await Mercury.parse(url, {html: buf, contentType: "text"});
  var inlined = await inliner(article.content, url);
  article.content_txt = article_txt.content;
  article.content = inlined;
  return article;
}

function httpGet(url) {
  return new Promise((resolve, reject) => {
      const http      = require('http'),
            https     = require('https');

      let client = http;

      if (url.toString().indexOf("https") === 0) {
          client = https;
      }

      client.get(url, (resp) => {
          let chunks = [];

          // A chunk of data has been recieved.
          resp.on('data', (chunk) => {
              chunks.push(chunk);
          });

          // The whole response has been received. Print out the result.
          resp.on('end', () => {
              resolve(Buffer.concat(chunks));
          });

      }).on("error", (err) => {
          reject(err);
      });
  });
}


async function inliner(html, base) {
  var contentTypes = {
    ".png": "image/png",
    ".gif": "image/gif",
    ".jpg": "image/jpeg",
    ".jpeg": "image/jpeg",
    ".bmp": "image/bmp",
    ".webp": "image/webp"
  }
  
  var dom = cheerio.load(String(html));
  var tasks = [];

  dom('img').each(async (idx, el) => {
    el = dom(el);
    var src = el.attr('src');
    if (src.startsWith("data:")) {
      console.error("found an embedded image, skipped");
      return;
    }
    src = url.resolve(base, src);
    var task = httpGet(src).then((img) => {
      console.error("url fetch success", src);
      var contentType = contentTypes[path.extname(src)] || 'image/png';
      var dataUri = "data:" + contentType + ";base64," + img.toString("base64");
      el.attr('src', dataUri);
      el.attr('data-x-src', src);
    }).catch((e) => console.error("failed image:", error));

    tasks.push(task);
  })
  await Promise.all(tasks);
  return dom.html({decodeEntities: false});
}

(async () => {
  const source_path = process.argv[2];
  const source_url = process.argv[3] || "https://www.example.com/the-page-i-got-the-source-from";
  if (!source_path || !source_url) {
    console.error("usage: mercury-extractor <html_file> <base_url>");
    return 1;
  }
  if (source_path == "--version"){
    console.log("0.1.0")
  }
  else{
    const fs = require("fs");
    const data = fs.readFileSync(source_path).toString();
    var parsed = await parse(data, source_url);
    console.log(JSON.stringify(parsed));
  }
  
})();
